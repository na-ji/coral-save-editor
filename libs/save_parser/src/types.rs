use uesave::{StructType, Types};

#[rustfmt::skip]
pub fn get_types() -> Types {
    let mut types = Types::new();

    types.add(String::from(".saveData.timeLocationMapTracker.Key"), StructType::DateTime);
    types.add(String::from(".saveData.timeLocationMapTracker.Value"), StructType::Vector);
    types.add(String::from(".saveData.interiorSaveDataMap.Value"), StructType::Struct(Some(String::from("Map"))));
    types.add(String::from(".saveData.interiorSaveDataMap.tileEntryMap.Key"), StructType::Struct(None));
    types.add(String::from(".saveData.interiorSaveDataMap.tileEntryMap.Value"), StructType::Struct(Some(String::from("Map"))));
    types.add(String::from(".saveData.interiorSaveDataMap.tileEntryMap.wallObjects.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.furnitureSaveDataMap.Value"), StructType::Struct(Some(String::from("Map"))));
    types.add(String::from(".saveData.furnitureSaveDataMap.savedEntryMap.Value"), StructType::Struct(Some(String::from("Map"))));
    types.add(String::from(".saveData.furnitureSaveDataMap.savedEntryMap.entryArray.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.NPCSaveData.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.NPCSaveData.triggeredDynamicDialog.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.npcWorldSpeechCooldownMap.Value"), StructType::Struct(Some(String::from("Map"))));
    types.add(String::from(".saveData.npcWorldSpeechCooldownMap.waypointTriggerMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.shopStocks.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.shopStocks.stockItems.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.shopStocks.limitedItemStock.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.dayEndEventCooldownMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.unlockedTornPages.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.mailRuntimeTags.Value"), StructType::GameplayTagContainer);
    types.add(String::from(".saveData.questRuntimeTags.Value"), StructType::GameplayTagContainer);
    types.add(String::from(".saveData.mineProgressionMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.labUpgradeData.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.donatedItemInfo"), StructType::Struct(Some(String::from("Set"))));
    types.add(String::from(".saveData.dynamicQuestDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.enchantmentSaveData.enchantmentSaveDataMap.Value"), StructType::Struct(Some(String::from("Map"))));
    types.add(String::from(".saveData.offeringGroupsMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.offeringGroupsMap.offeringsMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.divingOfferingMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.procToGrowSaves.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.divingLevelData.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.divingLevelData.clusterData.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.caughtFish.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.lastGiftFromNPCDate.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.minigameClaimedReward.claimedRewardWinPosition.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.itemStorageDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.gridObjectsDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.farmHouseMaterials.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.ranchBuildingData.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.ranchBuildingData.animalsData.logAnimalMoods.Key"), StructType::Struct(None));
    types.add(String::from(".saveData.ranchBuildingData.animalsData.logAnimalMoods.Value"), StructType::Struct(Some(String::from("Set"))));
    types.add(String::from(".saveData.ranchBuildingData.autoCollectorData.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.ranchBuildingData.interiorSaveData.tileEntryMap.Key"), StructType::Struct(None));
    types.add(String::from(".saveData.ranchBuildingData.interiorSaveData.tileEntryMap.Value"), StructType::Struct(Some(String::from("Map"))));
    types.add(String::from(".saveData.ranchBuildingData.interiorSaveData.tileEntryMap.wallObjects.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.ranchBuildingData.placedData.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.ranchBuildingData.placedData.savedEntryMap.entryArray.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.gachaMachineData.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.tileSaveDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.tileSaveDataMap.savedEntryMap.Key"), StructType::Struct(None));
    types.add(String::from(".saveData.tileSaveDataMap.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.farmTileSaveDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.farmTileSaveDataMap.savedEntryMap.Key"), StructType::Struct(None));
    types.add(String::from(".saveData.farmTileSaveDataMap.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.players.playerStatistics.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.players.playerMasteryLevel.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.players.caughtBug.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.players.journalData.fishingCaughtables.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.players.journalData.catchingCaughtables.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.players.weekNpcHangoutData.Value"), StructType::Struct(Some(String::from("int32"))));
    types.add(String::from(".saveData.players.farmHouse.interiorSaveData.interiorTileData.tileEntryMap.Key"), StructType::Struct(None));
    types.add(String::from(".saveData.players.farmHouse.interiorSaveData.interiorTileData.tileEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.players.farmHouse.interiorSaveData.placedTileData.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.players.farmHouse.interiorSaveData.furnitureTileData.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.players.underwaterFarmHouseInterior.interiorTileData.tileEntryMap.Key"), StructType::Struct(None));
    types.add(String::from(".saveData.players.underwaterFarmHouseInterior.interiorTileData.tileEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.players.underwaterFarmHouseInterior.interiorTileData.tileEntryMap.wallObjects.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.players.underwaterFarmHouseInterior.furnitureTileData.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.players.underwaterFarmHouseInterior.furnitureTileData.savedEntryMap.entryArray.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.players.underwaterFarmHouseInterior.placedTileData.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.players.museumCollectionProgress.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.players.playerCharacterId"), StructType::Struct(None));
    types.add(String::from(".saveData.players.timeLocationMapTracker.Key"), StructType::DateTime);
    types.add(String::from(".saveData.players.timeLocationMapTracker.Value"), StructType::Vector);
    types.add(String::from(".saveData.players.shopStocks.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.players.dynamicQuestConditionDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.players.creatorUniqueId"), StructType::UniqueNetIdRepl);
    types.add(String::from(".saveData.dynamicQuestConditionDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.cropSaveDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.cropSaveDataMap.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.cropSaveDataMap.savedEntryMap.entryArray.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.debrisSaveDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.debrisSaveDataMap.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.debrisSaveDataMap.savedEntryMap.entryArray.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.farmBuildingSaveDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.farmBuildingSaveDataMap.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.farmBuildingSaveDataMap.savedEntryMap.entryArray.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.fruitPlantSaveDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.fruitPlantSaveDataMap.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.fruitPlantSaveDataMap.savedEntryMap.entryArray.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.fruitTreeSaveDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.fruitTreeSaveDataMap.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.fruitTreeSaveDataMap.savedEntryMap.entryArray.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.grassSaveDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.grassSaveDataMap.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.grassSaveDataMap.savedEntryMap.entryArray.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.grassSaveDataMap.savedEntryMap.entryArray.tuftInQuadrantMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.groundSaveDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.groundSaveDataMap.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.groundSaveDataMap.savedEntryMap.entryArray.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.lootSaveDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.lootSaveDataMap.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.lootSaveDataMap.savedEntryMap.entryArray.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.placedSaveDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.placedSaveDataMap.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.placedSaveDataMap.savedEntryMap.entryArray.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.fenceSaveDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.fenceSaveDataMap.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.gateSaveDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.gateSaveDataMap.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.floorSaveDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.floorSaveDataMap.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.treeSaveDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.treeSaveDataMap.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.treeSaveDataMap.savedEntryMap.entryArray.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.disturbedSoilDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.disturbedSoilDataMap.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.disturbedSoilDataMap.savedEntryMap.entryArray.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.giantCropDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.giantCropDataMap.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.fertilizerDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.fertilizerDataMap.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.fertilizerDataMap.savedEntryMap.entryArray.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.excavationSoilDataMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.excavationSoilDataMap.savedEntryMap.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.players.minigameClaimedReward.claimedRewardWinPosition.Value"), StructType::Struct(None));
    types.add(String::from(".saveData.players.minigameClaimedReward.claimedTriviaCategoryAndWinPosition.Value"), StructType::Struct(None));

    types
}
